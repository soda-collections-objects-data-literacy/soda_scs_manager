<?php

/**
 * @file
 * Functions for the soda_scs_manager module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\soda_scs_manager\Entity\Bundle\SodaScsComponentBundle;
use Drupal\soda_scs_manager\Entity\Bundle\SodaScsProjectsBundle;
use Drupal\soda_scs_manager\Entity\Bundle\SodaScsServiceKeyBundle;
use Drupal\soda_scs_manager\Entity\Bundle\SodaScsStackBundle;
use Drupal\user\UserInterface;
use Drupal\soda_scs_manager\Entity\SodaScsProject;
use Drupal\soda_scs_manager\Entity\SodaScsComponent;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;

// This file contains implementations of the following hooks:
// - hook_help(): implements the user help page for the module.
// - hook_ENTITY_TYPE_view(): implements the content of the overview page
//   for soda_scs_component and soda_scs_stack entities.
// - hook_theme(): implements the theme for several entites and pages.
// - hook_preprocess(): implements the preprocess function to add
//   javascript libraries.
// - hook_user_insert(): implements the functionality that assigns a role to a
//   newly created user.
// - hook_bundle_info(): add the additional bundles for the soda_scs_component.
// - hook_entity_field_storage_info(): Defines storage for all bundle fields.
// - hook_options_list_alter(): Alters the options list for
//   the connectedComponents field.
/**
 * Implements hook_help().
 */
function soda_scs_manager_help($route_name, RouteMatchInterface $route_match) {
  $output = '';

  switch ($route_name) {
    case 'help.page.soda_scs_manager':
      $output .= '<h3>' . new TranslatableMarkup('About') . '</h3>';
      $output .= '<p>' . new TranslatableMarkup('This module provides the functionality to create, validate and manage WissKI Cloud accounts.') . '</p>';

      $output .= '<h3>' . new TranslatableMarkup('Configuration') . '</h3>';
      $output .= '<p>' . new TranslatableMarkup('Configuration is done on the <a href="@settingsPage" targer="_blank">settings page</a>.', ['@settingsPage' => '/admin/config/wisski-cloud-account-manager/settings']) . '</p>';

      $output .= '<h3>' . new TranslatableMarkup('Create WissKI Cloud Account') . '</h3>';
      $output .= '<p>' . new TranslatableMarkup('<a href="@createPage" targer="_blank">This page</a> allows you to create a WissKI Cloud account.', ['@createPage' => '/wisski-cloud-account-manager/create']) . '</p>';

      $output .= '<h3>' . new TranslatableMarkup('Validate WissKI Cloud Account') . '</h3>';
      $output .= '<p>' . new TranslatableMarkup('<a href="@validationPage" targer="_blank">This page</a> allows you to validate your account and check the status of the provision.', ['@validationPage' => '/wisski-cloud-account-manager/validate/GsyMv5DdFhPCixL1wTLZhzFg7sVDOiHq']) . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_theme().
 */
function soda_scs_manager_theme($existing, $type, $theme, $path) {
  return [
    'soda_scs_manager__store' => [
      'variables' => [
        'components' => NULL,
        'stacks' => NULL,
        'attributes' => NULL,
      ],
      'template' => 'pages/soda-scs-manager--store',
    ],
    'soda_scs_manager__desk' => [
      'variables' => [
        'entitiesByUser' => NULL,
        'entity_type' => NULL,
        'attributes' => NULL,
      ],
      'template' => 'pages/soda-scs-manager--desk',
    ],
    'soda_scs_manager__entity_card' => [
      'variables' => [
        'description' => NULL,
        'imageUrl' => NULL,
        'tags' => NULL,
        'title' => NULL,
        'type' => NULL,
        'url' => NULL,
      ],
      'template' => 'cards/soda-scs-manager--entity-card',
    ],
    'soda_scs_manager__start_page' => [
      'variables' => [
        'attributes' => NULL,
      ],
      'template' => 'pages/soda-scs-manager--start-page',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function soda_scs_manager_preprocess_soda_scs_component(array &$variables) {
  $variables['#attached']['library'][] = 'soda_scs_manager/health_status';
}

/**
 * Implements hook_ENTITY_TYPE_view() for soda_scs_component entities.
 */
function soda_scs_manager_soda_scs_component_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->getEntityTypeId() === 'soda_scs_component') {
    // Check if the imageUrl field has a value.
    /** @var \Drupal\soda_scs_manager\Entity\SodaScsComponentInterface $entity */
    if ($imageUrl = $entity->get('imageUrl')->value) {
      $imageUrl = Drupal::service('file_url_generator')->generateAbsoluteString($imageUrl);
      $build['#attached']['library'][] = 'soda_scs_manager/globalStyling';
      // Add a custom render array for the imageUrl field.
      $build['imageUrl'] = [
        '#type' => 'markup',
        '#markup' => '<img class="img-thumbnail soda-scs-manager--img--thumbnail" src="' . $imageUrl . '" alt="Image description" />',
        // Ensure proper sanitization of the URL.
        '#allowed_tags' => ['img'],
      // Adjust the weight as needed.
        '#weight' => 10,
      ];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view() for soda_scs_component entities.
 */
function soda_scs_manager_soda_scs_stack_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->getEntityTypeId() === 'soda_scs_stack') {
    // Check if the imageUrl field has a value.
    /** @var \Drupal\soda_scs_manager\Entity\SodaScsComponentInterface $entity */
    if ($imageUrl = $entity->get('imageUrl')->value) {
      $imageUrl = Drupal::service('file_url_generator')->generateAbsoluteString($imageUrl);
      $build['#attached']['library'][] = 'soda_scs_manager/globalStyling';
      // Add a custom render array for the imageUrl field.
      $build['imageUrl'] = [
        '#type' => 'markup',
        '#markup' => '<img class="img-thumbnail soda-scs-manager--img--thumbnail" src="' . $imageUrl . '" alt="Image description" />',
        // Ensure proper sanitization of the URL.
        '#allowed_tags' => ['img'],
      // Adjust the weight as needed.
        '#weight' => 10,
      ];
    }
  }
}

/**
 * Implements hook_user_insert().
 */
function soda_scs_manager_user_insert(UserInterface $user) {

  // Set the user status to active by default.
  if (!$user->isActive()) {
    $user->activate();
  }

  // Assign the scs_user role to the new user.
  if (!$user->hasRole('scs_user')) {
    $user->addRole('scs_user');
  }

  // Save the updated user.
  $user->save();

  // Ensure the role exists and has the required permissions.
  soda_scs_manager_ensure_scs_user_role();
}

/**
 * Ensure the scs_user role exists and has the required permissions.
 */
function soda_scs_manager_ensure_scs_user_role() {
  // Get the role storage.
  $role_storage = \Drupal::entityTypeManager()->getStorage('user_role');

  // Create the custom role if it doesn't exist.
  if (!$role_storage->load('scs_user')) {
    $role = $role_storage->create(['id' => 'scs_user', 'label' => 'scs_user']);
    $role->save();
  }

  // Assign the required permissions to the custom role.
  $permissions = [
    'soda scs manager user',
    'create soda scs stack',
    'view soda scs stack',
    'delete soda scs stack',
    'create soda scs component',
    'view soda scs component',
    'delete soda scs component',
    'create soda scs service key',
    'view soda scs service key',
    'delete soda scs service key',
  ];

  user_role_grant_permissions('scs_user', $permissions);
}

/**
 * Implements hook_entity_bundle_info().
 */
function soda_scs_manager_entity_bundle_info() {
  // Components.
  $bundles['soda_scs_component']['soda_scs_filesystem_component'] = [
    'label' => new TranslatableMarkup('Filesystem'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('A filesystem for storage of structured data.'),
    'imageUrl' => 'public://soda_scs_manager/images/filesystem.svg',
    'tags' => ['filesharing'],
  ];

  $bundles['soda_scs_component']['soda_scs_sql_component'] = [
    'label' => new TranslatableMarkup('SQL Database'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('A relational database for storage of structured data.'),
    'imageUrl' => 'public://soda_scs_manager/images/sql.svg',
    'tags' => ['database'],
  ];

  $bundles['soda_scs_component']['soda_scs_triplestore_component'] = [
    'label' => new TranslatableMarkup('Triplestore'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('Graph database for storage of RDF data.'),
    'imageUrl' => 'public://soda_scs_manager/images/triplestore.svg',
    'tags' => ['database', 'triplestore'],
  ];

  $bundles['soda_scs_component']['soda_scs_webprotege_component'] = [
    'label' => new TranslatableMarkup('WebProtégé'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('A web-based tool for creating and editing OWL ontologies.'),
    'imageUrl' => 'public://soda_scs_manager/images/protege.svg',
    'tags' => ['ontology'],
  ];

  $bundles['soda_scs_component']['soda_scs_wisski_component'] = [
    'label' => new TranslatableMarkup('WissKI'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('A WissKI Component is a component of a WissKI Stack.'),
    'imageUrl' => 'public://soda_scs_manager/images/wisski.svg',
    'tags' => ['ontology', 'content-management'],
  ];

  // Projects.
  $bundles['soda_scs_project']['default'] = [
    'label' => new TranslatableMarkup('Default Project'),
    'class' => SodaScsProjectsBundle::class,
    'description' => new TranslatableMarkup('A Project is a collection of components and stacks.'),
  ];

  // Service Keys.
  $bundles['soda_scs_service_key']['default'] = [
    'label' => new TranslatableMarkup('Default Service Key'),
    'class' => SodaScsServiceKeyBundle::class,
    'description' => new TranslatableMarkup('A Service Key is a key for a service.'),
  ];

  // Stacks.
  $bundles['soda_scs_stack']['soda_scs_jupyter_stack'] = [
    'label' => new TranslatableMarkup('JupyterHub'),
    'class' => SodaScsStackBundle::class,
    'description' => new TranslatableMarkup('A JupyterHub Stack contains Jupyter and OpenRefine.'),
    'imageUrl' => 'public://soda_scs_manager/images/jupyterhub-stack.svg',
    'tags' => ['coding', 'data-science', 'data-cleaning'],
  ];

  $bundles['soda_scs_stack']['soda_scs_wisski_stack'] = [
    'label' => new TranslatableMarkup('WissKI Environment'),
    'class' => SodaScsStackBundle::class,
    'description' => new TranslatableMarkup('A WissKI Stack contains a WissKI, a Triplestore and a Database.'),
    'imageUrl' => 'public://soda_scs_manager/images/wisski-stack.svg',
    'tags' => ['content-management', 'database', 'ontology', 'publishing', 'triplestore'],
  ];

  $bundles['soda_scs_stack']['soda_scs_nextcloud_stack'] = [
    'label' => new TranslatableMarkup('Nextcloud'),
    'class' => SodaScsStackBundle::class,
    'description' => new TranslatableMarkup('A Nextcloud Stack contains Nextcloud, Draw.io and OnlyOffice.'),
    'imageUrl' => 'public://soda_scs_manager/images/nextcloud-stack.svg',
    'tags' => ['filesharing', 'office', 'publishing'],
  ];

  return $bundles;
}

/**
 * Implements hook_entity_field_storage_info().
 *
 * Defines storage for all bundle fields.
 */
function soda_scs_manager_entity_field_storage_info(EntityTypeInterface $entity_type) {
  if (in_array($entity_type->id(), ['soda_scs_component', 'soda_scs_project', 'soda_scs_service_key', 'soda_scs_stack'])) {
    $definitions = [];
    $bundles = \Drupal::service('entity_type.bundle.info')->getBundleInfo($entity_type->id());
    foreach ($bundles as $bundle_id => $bundle_info) {
      if (isset($bundle_info['class'])) {
        $class = '\\' . $bundle_info['class'];
        if (class_exists($class)) {
          $bundle_defs = $class::bundleFieldDefinitions($entity_type, $bundle_id, []);
          $definitions = array_merge($definitions, $bundle_defs);
        }
      }
    }
    return $definitions;
  }
}

/**
 * Implements hook_ENTITY_TYPE_update() for soda_scs_project entities.
 *
 * Updates the partOfProjects field on components when a project is updated.
 */
function soda_scs_manager_soda_scs_project_update(SodaScsProject $entity) {
  _soda_scs_manager_sync_project_component_relationship($entity);
}

/**
 * Implements hook_ENTITY_TYPE_insert() for soda_scs_project entities.
 *
 * Updates the partOfProjects field on components when a project is created.
 */
function soda_scs_manager_soda_scs_project_insert(SodaScsProject $entity) {
  _soda_scs_manager_sync_project_component_relationship($entity);
}

/**
 * Implements hook_ENTITY_TYPE_delete() for soda_scs_project entities.
 *
 * Deletes the partOfProjects field on components when a project is deleted.
 */
function soda_scs_manager_soda_scs_project_delete(SodaScsProject $entity) {
  _soda_scs_manager_sync_project_component_relationship($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update() for soda_scs_component entities.
 *
 * Updates the connectedComponents field on
 * projects when a component is updated.
 */
function soda_scs_manager_soda_scs_component_update(SodaScsComponent $entity) {
  _soda_scs_manager_sync_component_project_relationship($entity);
}

/**
 * Implements hook_ENTITY_TYPE_insert() for soda_scs_component entities.
 *
 * Updates the connectedComponents field on
 * projects when a component is created.
 */
function soda_scs_manager_soda_scs_component_insert(SodaScsComponent $entity) {
  _soda_scs_manager_sync_component_project_relationship($entity);
}

/**
 * Implements hook_ENTITY_TYPE_delete() for soda_scs_component entities.
 *
 * Deletes the connectedComponents field on
 * projects when a component is deleted.
 */
function soda_scs_manager_soda_scs_component_delete(SodaScsComponent $entity) {
  _soda_scs_manager_sync_component_project_relationship($entity);
}

/**
 * Syncs the relationship from project to components.
 *
 * @param \Drupal\soda_scs_manager\Entity\SodaScsProject $project
 *   The project entity.
 */
function _soda_scs_manager_sync_project_component_relationship(SodaScsProject $project) {
  // Get components referenced by this project.
  $componentIds = [];
  $connectedComponents = $project->get('connectedComponents')->getValue();
  foreach ($connectedComponents as $componentRef) {
    $componentIds[] = $componentRef['target_id'];
  }

  // Load all components that might reference this project.
  $componentStorage = \Drupal::entityTypeManager()->getStorage('soda_scs_component');

  // First, find all components that reference this project.
  $query = $componentStorage->getQuery()
    ->condition('partOfProjects', $project->id())
    ->accessCheck(FALSE);
  $referencingComponentIds = $query->execute();

  if (!empty($referencingComponentIds)) {
    $referencingComponents = $componentStorage->loadMultiple($referencingComponentIds);

    // For each component that references this project,
    // check if it should still reference it.
    /** @var \Drupal\soda_scs_manager\Entity\SodaScsComponent $component */
    foreach ($referencingComponents as $component) {
      // Skip if the component is still connected to the project.
      if (in_array($component->id(), $componentIds)) {
        continue;
      }

      // Component is no longer connected to the project, remove the reference.
      $projectRefs = [];
      foreach ($component->get('partOfProjects')->getValue() as $ref) {
        if ($ref['target_id'] != $project->id()) {
          $projectRefs[] = $ref;
        }
      }

      // Update the component with the new references.
      $component->set('partOfProjects', $projectRefs);
      // Prevent infinite recursion by setting a flag.
      $component->syncing = TRUE;
      $component->save();
    }
  }

  // If there are no components connected to this project, we're done.
  if (empty($componentIds)) {
    return;
  }

  // Load all currently referenced components.
  /** @var \Drupal\soda_scs_manager\Entity\SodaScsComponent[] $components */
  $components = $componentStorage->loadMultiple($componentIds);

  // For each component, ensure it references this project.
  foreach ($components as $component) {
    $projectRefs = $component->get('partOfProjects')->getValue();
    $projectRefIds = [];
    foreach ($projectRefs as $ref) {
      $projectRefIds[] = $ref['target_id'];
    }

    // If this project is not referenced by the component, add it.
    if (!in_array($project->id(), $projectRefIds)) {
      $projectRefs[] = ['target_id' => $project->id()];
      $component->set('partOfProjects', $projectRefs);
      // Prevent infinite recursion by setting a flag.
      $component->syncing = TRUE;
      $component->save();
    }
  }
}

/**
 * Syncs the relationship from component to projects.
 *
 * @param \Drupal\soda_scs_manager\Entity\SodaScsComponent $component
 *   The component entity.
 */
function _soda_scs_manager_sync_component_project_relationship(SodaScsComponent $component) {
  // Skip if we're in the middle of syncing to prevent infinite recursion.
  if (!empty($component->syncing)) {
    return;
  }

  // Get projects referenced by this component.
  $projectIds = [];
  $partOfProjects = $component->get('partOfProjects')->getValue();
  foreach ($partOfProjects as $projectRef) {
    $projectIds[] = $projectRef['target_id'];
  }

  if (empty($projectIds)) {
    return;
  }

  // Load all referenced projects.
  $projectStorage = \Drupal::entityTypeManager()->getStorage('soda_scs_project');
  /** @var \Drupal\soda_scs_manager\Entity\SodaScsProject[] $projects */
  $projects = $projectStorage->loadMultiple($projectIds);

  // For each project, ensure it references this component.
  foreach ($projects as $project) {
    /** @var \Drupal\soda_scs_manager\Entity\SodaScsProject $project */
    $componentRefs = $project->get('connectedComponents')->getValue();
    $componentRefIds = [];
    foreach ($componentRefs as $ref) {
      $componentRefIds[] = $ref['target_id'];
    }

    // If this component is not referenced by the project, add it.
    if (!in_array($component->id(), $componentRefIds)) {
      $componentRefs[] = ['target_id' => $component->id()];
      $project->set('connectedComponents', $componentRefs);
      // Prevent infinite recursion by setting a flag.
      $project->syncing = TRUE;
      $project->save();
    }
  }
}

/**
 * Implements hook_mail().
 */
function soda_scs_manager_mail($key, &$message, $params) {
  $options = [
    'langcode' => $message['langcode'],
  ];

  $site_config = \Drupal::config('system.site');
  $site_name = $site_config->get('name');

  switch ($key) {
    case 'registration_admin_notification':
      $message['subject'] = t('New user registration on @site_name', ['@site_name' => $site_name], $options);
      $message['body'][] = t('A new user has registered on @site_name.', ['@site_name' => $site_name], $options);
      $message['body'][] = t('Username: @username', ['@username' => $params['username']], $options);
      $message['body'][] = t('Email: @email', ['@email' => $params['email']], $options);
      $message['body'][] = t('Name: @first_name @last_name', [
        '@first_name' => $params['first_name'],
        '@last_name' => $params['last_name'],
      ], $options);
      $message['body'][] = t('To approve or reject this registration, visit: @url', [
        '@url' => Url::fromRoute('soda_scs_manager.user_registration_approvals')
          ->setAbsolute()
          ->toString(),
      ], $options);
      break;

    case 'registration_user_notification':
      $message['subject'] = t('Your registration on @site_name', ['@site_name' => $site_name], $options);
      $message['body'][] = t('Hello @username,', ['@username' => $params['username']], $options);
      $message['body'][] = t('Thank you for registering on @site_name.', ['@site_name' => $site_name], $options);
      $message['body'][] = t('Your registration is pending administrator approval. You will receive another email once your account is approved or rejected.', [], $options);
      break;

    case 'registration_approval':
      $message['subject'] = t('Your account on @site_name has been approved', ['@site_name' => $site_name], $options);
      $message['body'][] = t('Hello @username,', ['@username' => $params['username']], $options);
      $message['body'][] = t('Your registration on @site_name has been approved.', ['@site_name' => $site_name], $options);
      $message['body'][] = t('You can now log in at: @login_url', ['@login_url' => $params['login_url']], $options);
      $message['body'][] = t('For security reasons, you will need to reset your password when you first log in.', [], $options);
      break;

    case 'registration_rejection':
      $message['subject'] = t('Your account on @site_name was not approved', ['@site_name' => $site_name], $options);
      $message['body'][] = t('Hello @username,', ['@username' => $params['username']], $options);
      $message['body'][] = t('Your registration on @site_name has been reviewed and was not approved at this time.', ['@site_name' => $site_name], $options);
      $message['body'][] = t('If you believe this is an error, please contact the site administrators.', [], $options);
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form.
 */
function soda_scs_manager_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  // Disable native Drupal registration by redirecting to our custom form.
  $response = new RedirectResponse(Url::fromRoute('soda_scs_manager.user_registration')->toString());
  $response->send();
  exit;
}

/**
 * Implements hook_form_FORM_ID_alter() for soda_scs_manager_stack_create_form.
 */
function soda_scs_manager_form_soda_scs_manager_stack_create_form_alter(&$form, &$form_state, $form_id) {
  // Disable the partOfProjects field.
  if (isset($form['partOfProjects'])) {
    $form['partOfProjects']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for soda_scs_manager_stack_create_form.
 */
function soda_scs_manager_form_soda_scs_manager_component_create_form_alter(&$form, &$form_state, $form_id) {
  // Disable the partOfProjects field.
  if (isset($form['partOfProjects'])) {
    $form['partOfProjects']['#access'] = FALSE;
  }
  // Disable the partOfProjects field.
  if (isset($form['sharedWith'])) {
    $form['sharedWith']['#access'] = FALSE;
  }
}

/**
 * Implements hook_user_delete().
 *
 * Deletes a user from Keycloak when a Drupal user is deleted.
 */
function soda_scs_manager_user_delete(UserInterface $user) {
  // Get the Keycloak service user actions.
  $keycloakServiceUserActions = \Drupal::service('soda_scs_manager.keycloak_service.user.actions');
  // Get the service helpers.
  $serviceHelpers = \Drupal::service('soda_scs_manager.service.helpers');
  // Get the logger.
  $logger = \Drupal::logger('soda_scs_manager');
  // Get the messenger.
  $messenger = \Drupal::messenger();

  // Log the user deletion.
  $logger->notice('Deleting user from Keycloak: @username', ['@username' => $user->getAccountName()]);

  try {

    $username = $user->getAccountName();
    // Get Keycloak settings.
    $keycloakGeneralSettings = $serviceHelpers->initKeycloakGeneralSettings();

    // First get a token for Keycloak API authentication.
    $tokenRequest = $keycloakServiceUserActions->buildTokenRequest([]);
    $tokenResponse = $keycloakServiceUserActions->makeRequest($tokenRequest);

    if (!$tokenResponse['success']) {
      $logger->error('Failed to get Keycloak token for user deletion: @error', ['@error' => $tokenResponse['error']]);
      return;
    }

    // Extract the access token.
    $tokenData = json_decode($tokenResponse['data']['keycloakResponse']->getBody()->getContents(), TRUE);
    $accessToken = $tokenData['access_token'];

    // Set the token.
    $getUserParams['token'] = $accessToken;
    // userRouteParams.
    $getUserParams['routeParams'] = [
      'realm' => $keycloakGeneralSettings['realm'],

    ];

    // userQueryParams.
    $getUserParams['queryParams'] = [
      'username' => $username,
    ];

    // Get the user from Keycloak.
    $getUserRequest = $keycloakServiceUserActions->buildGetAllRequest($getUserParams);
    $getUserResponse = $keycloakServiceUserActions->makeRequest($getUserRequest);

    if (!$getUserResponse['success']) {
      $logger->error('Failed to find user in Keycloak: @error', ['@error' => $getUserResponse['error']]);
      return;
    }

    $userData = json_decode($getUserResponse['data']['keycloakResponse']->getBody()->getContents(), TRUE);

    // If no user found, log and return.
    if (empty($userData) || !is_array($userData) || count($userData) === 0) {
      $logger->notice('No matching user found in Keycloak for username: @username', ['@username' => $user->getAccountName()]);
      return;
    }

    // Set the token.
    $deleteUserParams['token'] = $accessToken;
    // Extract the Keycloak user ID.
    $deleteUserParams['routeParams'] = [
      'realm' => $keycloakGeneralSettings['realm'],
      'userId' => $userData[0]['id'],
    ];

    // Build the delete request.
    $deleteUserRequest = $keycloakServiceUserActions->buildDeleteRequest($deleteUserParams);
    // Make the deleterequest.
    $deleteUserResponse = $keycloakServiceUserActions->makeRequest($deleteUserRequest);

    if ($deleteUserResponse['success']) {
      $messenger->addMessage(t('Successfully deleted user from Keycloak: @username (ID: @id)', [
        '@username' => $getUserParams['queryParams']['username'],
        '@id' => $deleteUserParams['routeParams']['userId'],
      ]));
      $logger->notice('Successfully deleted user from Keycloak: @username (ID: @id)', [
        '@username' => $getUserParams['queryParams']['username'],
        '@id' => $deleteUserParams['routeParams']['userId'],
      ]);
    }
    else {
      $logger->error('Failed to delete user from Keycloak: @error', ['@error' => $deleteUserResponse['error']]);
    }
  }
  catch (\Exception $e) {
    $logger->error('Error deleting user from Keycloak: @error', ['@error' => $e->getMessage()]);
  }
}

/**
 * Implements hook_options_list_alter().
 */
function soda_scs_manager_options_list_alter_stop(array &$options, array $context) {
  // Check if this is our connectedComponents field for soda_scs_project.
  if (isset($context['fieldDefinition']) &&
      $context['fieldDefinition']->getName() === 'connectedComponents' &&
      $context['entity'] &&
      $context['entity']->getEntityTypeId() === 'soda_scs_project') {

    // Load entity type manager.
    $entityTypeManager = \Drupal::entityTypeManager();

    // Temporary array to store modified options.
    $modified_options = [];

    // Get the component storage handler.
    $componentStorage = $entityTypeManager->getStorage('soda_scs_component');

    // For each option, add the bundle label in parentheses.
    foreach ($options as $key => $value) {
      // Skip '_none' option if present.
      if ($key === '_none') {
        $modified_options[$key] = $value;
        continue;
      }

      // Load the component entity.
      $component = $componentStorage->load(array_key_first($value));
      if ($component) {
        // Get the bundle label.
        $bundleInfo = \Drupal::service('entity_type.bundle.info')->getBundleInfo('soda_scs_component');
        $bundleLabel = $bundleInfo[$component->bundle()]['label'] ?? $component->bundle();

        // Format the label as "Label (Bundle)".
        $modified_options[$key] = $component->label() . ' (' . $bundleLabel . ')';
      }
      else {
        // Keep original value if component can't be loaded.
        $modified_options[$key] = $value;
      }
    }

    // Replace original options with modified ones.
    $options = $modified_options;
  }
}
