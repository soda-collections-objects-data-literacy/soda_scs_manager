<?php

/**
 * @file
 * Functions for the soda_scs_manager module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\soda_scs_manager\Entity\Bundle\SodaScsComponentBundle;
use Drupal\soda_scs_manager\Entity\Bundle\SodaScsProjectsBundle;
use Drupal\soda_scs_manager\Entity\Bundle\SodaScsServiceKeyBundle;
use Drupal\soda_scs_manager\Entity\Bundle\SodaScsStackBundle;
use Drupal\user\UserInterface;

// This file contains implementations of the following hooks:
// - hook_help(): implements the user help page for the module.
// - hook_ENTITY_TYPE_view(): implements the content of the overview page
//   for soda_scs_component and soda_scs_stack entities.
// - hook_theme(): implements the theme for several entites and pages.
// - hook_preprocess(): implements the preprocess function to add
//   javascript libraries.
// - hook_user_insert(): implements the functionality that assigns a role to a
//   newly created user.
// - hook_bundle_info(): add the additional bundles for the soda_scs_component.
// - hook_entity_field_storage_info(): Defines storage for all bundle fields.

/**
 * Implements hook_help().
 */
function soda_scs_manager_help($route_name, RouteMatchInterface $route_match) {
  $output = '';

  switch ($route_name) {
    case 'help.page.soda_scs_manager':
      $output .= '<h3>' . new TranslatableMarkup('About') . '</h3>';
      $output .= '<p>' . new TranslatableMarkup('This module provides the functionality to create, validate and manage WissKI Cloud accounts.') . '</p>';

      $output .= '<h3>' . new TranslatableMarkup('Configuration') . '</h3>';
      $output .= '<p>' . new TranslatableMarkup('Configuration is done on the <a href="@settingsPage" targer="_blank">settings page</a>.', ['@settingsPage' => '/admin/config/wisski-cloud-account-manager/settings']) . '</p>';

      $output .= '<h3>' . new TranslatableMarkup('Create WissKI Cloud Account') . '</h3>';
      $output .= '<p>' . new TranslatableMarkup('<a href="@createPage" targer="_blank">This page</a> allows you to create a WissKI Cloud account.', ['@createPage' => '/wisski-cloud-account-manager/create']) . '</p>';

      $output .= '<h3>' . new TranslatableMarkup('Validate WissKI Cloud Account') . '</h3>';
      $output .= '<p>' . new TranslatableMarkup('<a href="@validationPage" targer="_blank">This page</a> allows you to validate your account and check the status of the provision.', ['@validationPage' => '/wisski-cloud-account-manager/validate/GsyMv5DdFhPCixL1wTLZhzFg7sVDOiHq']) . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_theme().
 */
function soda_scs_manager_theme($existing, $type, $theme, $path) {
  return [
    // Cards.
    'bundle_card' => [
      'variables' => ['title' => NULL, 'description' => NULL, 'url' => NULL, 'image_url' => NULL],
    ],

    'component_card' => [
      'variables' => ['component' => NULL],
    ],

    'stack_card' => [
      'variables' => ['stack' => NULL],
    ],

    'soda_scs_manager__entity_card' => [
      'variables' => ['entity' => NULL, 'entity_type' => NULL],
    ],

    // Pages.
    'stacks_desk' => [
      'variables' => [
        'stacksByUser' => NULL,
      ],
    ],

    'soda_scs_manager__desk' => [
      'variables' => [
        'entitiesByUser' => NULL,
      ],
    ],

    'components_desk' => [
      'variables' => [
        'componentsByUser' => NULL,
      ],
    ],

    'components_store' => [
      'variables' => [
        'components' => NULL,
      ],
    ],

    'users_page' => [
      'variables' => ['users' => NULL],
    ],

    'machine_name_with_edit' => [
      'variables' => [
        'machine_name' => NULL,
        'entity_id' => NULL,
        'entity_type' => NULL,
        'edit_label' => NULL,
        'edit_url' => NULL,
      ],
    ],

  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function soda_scs_manager_preprocess_soda_scs_component(array &$variables) {
  $variables['#attached']['library'][] = 'soda_scs_manager/health_status';
}

/**
 * Implements hook_ENTITY_TYPE_view() for soda_scs_component entities.
 */
function soda_scs_manager_soda_scs_component_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->getEntityTypeId() === 'soda_scs_component') {
    // Check if the imageUrl field has a value.
    /** @var \Drupal\soda_scs_manager\Entity\SodaScsComponentInterface $entity */
    if ($imageUrl = $entity->get('imageUrl')->value) {
      $imageUrl = Drupal::service('file_url_generator')->generateAbsoluteString($imageUrl);
      $build['#attached']['library'][] = 'soda_scs_manager/globalStyling';
      // Add a custom render array for the imageUrl field.
      $build['imageUrl'] = [
        '#type' => 'markup',
        '#markup' => '<img class="img-thumbnail soda-scs-manager--img--thumbnail" src="' . $imageUrl . '" alt="Image description" />',
        // Ensure proper sanitization of the URL.
        '#allowed_tags' => ['img'],
      // Adjust the weight as needed.
        '#weight' => 10,
      ];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view() for soda_scs_component entities.
 */
function soda_scs_manager_soda_scs_stack_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->getEntityTypeId() === 'soda_scs_stack') {
    // Check if the imageUrl field has a value.
    /** @var \Drupal\soda_scs_manager\Entity\SodaScsComponentInterface $entity */
    if ($imageUrl = $entity->get('imageUrl')->value) {
      $imageUrl = Drupal::service('file_url_generator')->generateAbsoluteString($imageUrl);
      $build['#attached']['library'][] = 'soda_scs_manager/globalStyling';
      // Add a custom render array for the imageUrl field.
      $build['imageUrl'] = [
        '#type' => 'markup',
        '#markup' => '<img class="img-thumbnail soda-scs-manager--img--thumbnail" src="' . $imageUrl . '" alt="Image description" />',
        // Ensure proper sanitization of the URL.
        '#allowed_tags' => ['img'],
      // Adjust the weight as needed.
        '#weight' => 10,
      ];
    }
  }
}

/**
 * Implements hook_user_insert().
 */
function soda_scs_manager_user_insert(UserInterface $user) {
  // Get the role ID of the custom role.
  $role_id = 'scs_user';

  // Assign the custom role to the new user.
  $user->addRole($role_id);

  // Save the updated user.
  $user->save();

  // Ensure the role exists and has the required permissions.
  soda_scs_manager_ensure_scs_user_role();
}

/**
 * Ensure the scs_user role exists and has the required permissions.
 */
function soda_scs_manager_ensure_scs_user_role() {
  // Get the role storage.
  $role_storage = \Drupal::entityTypeManager()->getStorage('user_role');

  // Create the custom role if it doesn't exist.
  if (!$role_storage->load('scs_user')) {
    $role = $role_storage->create(['id' => 'scs_user', 'label' => 'scs_user']);
    $role->save();
  }

  // Assign the required permissions to the custom role.
  $permissions = [
    'soda scs manager user',
    'create soda scs stack',
    'view soda scs stack',
    'delete soda scs stack',
    'create soda scs component',
    'view soda scs component',
    'delete soda scs component',
    'create soda scs service key',
    'view soda scs service key',
    'delete soda scs service key',
  ];

  user_role_grant_permissions('scs_user', $permissions);
}

/**
 * Implements hook_entity_bundle_info().
 */
function soda_scs_manager_entity_bundle_info() {
  // Components.
  $bundles['soda_scs_component']['soda_scs_collabora_component'] = [
    'label' => new TranslatableMarkup('Collabora Component'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('A Collabora instance for collaborative document editing.'),
    'imageUrl' => 'public://soda_scs_manager/images/collabora.svg',
  ];

  $bundles['soda_scs_component']['soda_scs_drawio_component'] = [
    'label' => new TranslatableMarkup('Draw.io Component'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('A Draw.io instance for conceptual modeling.'),
    'imageUrl' => 'public://soda_scs_manager/images/draw-io.svg',
  ];

  $bundles['soda_scs_component']['soda_scs_filesystem_component'] = [
    'label' => new TranslatableMarkup('Filesystem Component'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('A filesystem for storage of structured data.'),
    'imageUrl' => 'public://soda_scs_manager/images/filesystem.svg',
  ];

  $bundles['soda_scs_component']['soda_scs_jupyter_component'] = [
    'label' => new TranslatableMarkup('Jupyter Component'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('A Jupyter web IDE for coding in Python.'),
    'imageUrl' => 'public://soda_scs_manager/images/jupyternotebook.svg',
  ];

  $bundles['soda_scs_component']['soda_scs_nextcloud_component'] = [
    'label' => new TranslatableMarkup('Nextcloud Component'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('A Nextcloud instance for cloud storage and file sharing.'),
    'imageUrl' => 'public://soda_scs_manager/images/nextcloud.svg',
  ];

  $bundles['soda_scs_component']['soda_scs_open_refine_component'] = [
    'label' => new TranslatableMarkup('Open Refine Component'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('An open source web-based tool for data curation and editing.'),
    'imageUrl' => 'public://soda_scs_manager/images/openrefine.svg',
  ];

  $bundles['soda_scs_component']['soda_scs_sql_component'] = [
    'label' => new TranslatableMarkup('SQL Component'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('A relational database for storage of structured data.'),
    'imageUrl' => 'public://soda_scs_manager/images/sql.svg',
  ];
  $bundles['soda_scs_component']['soda_scs_triplestore_component'] = [
    'label' => new TranslatableMarkup('Triplestore Component'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('Graph database for storage of RDF data.'),
    'imageUrl' => 'public://soda_scs_manager/images/triplestore.svg',
  ];

  $bundles['soda_scs_component']['soda_scs_webprotege_component'] = [
    'label' => new TranslatableMarkup('WebProtégé Component'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('A web-based tool for creating and editing OWL ontologies.'),
    'imageUrl' => 'public://soda_scs_manager/images/protege.svg',
  ];

  $bundles['soda_scs_component']['soda_scs_wisski_component'] = [
    'label' => new TranslatableMarkup('WissKI Component'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('A WissKI Component is a component of a WissKI Stack.'),
    'imageUrl' => 'public://soda_scs_manager/images/wisski.svg',
  ];

  // Projects.
  $bundles['soda_scs_project']['default'] = [
    'label' => new TranslatableMarkup('Default Project'),
    'class' => SodaScsProjectsBundle::class,
    'description' => new TranslatableMarkup('A Project is a collection of components and stacks.'),
  ];

  // Service Keys.
  $bundles['soda_scs_service_key']['default'] = [
    'label' => new TranslatableMarkup('Default Service Key'),
    'class' => SodaScsServiceKeyBundle::class,
    'description' => new TranslatableMarkup('A Service Key is a key for a service.'),
  ];

  // Stacks.
  $bundles['soda_scs_stack']['soda_scs_jupyter_stack'] = [
    'label' => new TranslatableMarkup('JupyterHub Stack'),
    'class' => SodaScsStackBundle::class,
    'description' => new TranslatableMarkup('A JupyterHub Stack contains Jupyter, Open Refine.'),
    'imageUrl' => 'public://soda_scs_manager/images/jupyter-stack.svg',
  ];

  $bundles['soda_scs_stack']['soda_scs_wisski_stack'] = [
    'label' => new TranslatableMarkup('WissKI Stack'),
    'class' => SodaScsStackBundle::class,
    'description' => new TranslatableMarkup('A WissKI Stack contains a WissKI, a Triplestore and a Database.'),
    'imageUrl' => 'public://soda_scs_manager/images/wisski-stack.svg',
  ];

  $bundles['soda_scs_stack']['soda_scs_nextcloud_stack'] = [
    'label' => new TranslatableMarkup('Nextcloud Stack'),
    'class' => SodaScsStackBundle::class,
    'description' => new TranslatableMarkup('A Nextcloud Stack contains Nextcloud, Draw.io and Collabora.'),
    'imageUrl' => 'public://soda_scs_manager/images/nextcloud-stack.svg',
  ];

  return $bundles;
}

/**
 * Implements hook_entity_field_storage_info().
 *
 * Defines storage for all bundle fields.
 */
function soda_scs_manager_entity_field_storage_info(EntityTypeInterface $entity_type) {
  if (in_array($entity_type->id(), ['soda_scs_component', 'soda_scs_project', 'soda_scs_service_key', 'soda_scs_stack'])) {
    $definitions = [];
    $bundles = \Drupal::service('entity_type.bundle.info')->getBundleInfo($entity_type->id());
    foreach ($bundles as $bundle_id => $bundle_info) {
      if (isset($bundle_info['class'])) {
        $class = '\\' . $bundle_info['class'];
        if (class_exists($class)) {
          $bundle_defs = $class::bundleFieldDefinitions($entity_type, $bundle_id, []);
          $definitions = array_merge($definitions, $bundle_defs);
        }
        else {
          $a = 1;
        }
      }
    }
    return $definitions;
  }
}
