<?php

/**
 * @file
 * Functions for the soda_scs_manager module.
 */

use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;
use Drupal\soda_scs_manager\Entity\Bundle\SodaScsComponentBundle;
use Drupal\soda_scs_manager\Entity\Bundle\SodaScsProjectsBundle;
use Drupal\soda_scs_manager\Entity\Bundle\SodaScsServiceKeyBundle;
use Drupal\soda_scs_manager\Entity\Bundle\SodaScsStackBundle;
use Drupal\soda_scs_manager\Entity\SodaScsComponent;
use Drupal\soda_scs_manager\Entity\SodaScsProject;
use Drupal\soda_scs_manager\Entity\SodaScsServiceKey;
use Drupal\soda_scs_manager\Entity\SodaScsSnapshot;
use Drupal\soda_scs_manager\Entity\SodaScsStack;
use Drupal\user\UserInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_css_alter().
 *
 * @todo Make a proper theme.
 */
function soda_scs_manager_css_alter(&$css, AttachedAssetsInterface $assets, LanguageInterface $language) {
  $filePath = \Drupal::service('extension.list.module')->getPath('soda_scs_manager') . '/css/global.css';
  if (!isset($css[$filePath])) {
    $css[$filePath] = [
      'weight' => 200,
      'group' => 200,
      'type' => 'file',
      'data' => $filePath,
      'media' => 'all',
      'preprocess' => TRUE,
    ];
  }
}

/**
 * Implements hook_entity_base_field_info().
 *
 * Adds custom fields to the user entity.
 */
function soda_scs_manager_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'user') {
    $fields['default_project'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(new TranslatableMarkup('Default Project'))
      ->setDescription(new TranslatableMarkup('The default project for this user.'))
      ->setSetting('target_type', 'soda_scs_project')
      ->setSetting('target_bundles', ['default'])
      ->setSetting('handler', 'soda_scs_project_access')
      ->setSetting('handler_settings', [
        'auto_create' => FALSE,
        'sort' => [
          'field' => 'label',
          'direction' => 'ASC',
        ],
      ])
      ->setRequired(TRUE)
      ->setCardinality(1)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'entity_reference_autocomplete',
        'weight' => 10,
        'label' => 'above',
        'settings' => [
          'match_operator' => 'CONTAINS',
          'size' => 60,
          'placeholder' => '',
        ],
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'type' => 'entity_reference_label',
        'weight' => 10,
        'label' => 'above',
        'settings' => [
          'link' => TRUE,
        ],
      ]);
    $fields['first_name'] = BaseFieldDefinition::create('string')
      ->setLabel(new TranslatableMarkup('First Name'))
      ->setDescription(new TranslatableMarkup('The first name of the user.'))
      ->setRequired(TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => 10,
        'label' => 'above',
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'type' => 'string',
        'weight' => 10,
        'label' => 'above',
      ]);
    $fields['last_name'] = BaseFieldDefinition::create('string')
      ->setLabel(new TranslatableMarkup('Last Name'))
      ->setDescription(new TranslatableMarkup('The last name of the user.'))
      ->setRequired(TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => 10,
        'label' => 'above',
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'type' => 'string',
        'weight' => 10,
        'label' => 'above',
      ]);
    $fields['sso_user_id'] = BaseFieldDefinition::create('string')
      ->setLabel(new TranslatableMarkup('SSO User ID'))
      ->setDescription(new TranslatableMarkup('The SSO user ID of the user.'))
      ->setRequired(TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => 10,
        'label' => 'above',
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'type' => 'string',
        'weight' => 10,
        'label' => 'above',
      ]);
  }
  return $fields;
}

/**
 * Implements hook_entity_bundle_info().
 */
function soda_scs_manager_entity_bundle_info() {
  // Components.
  $bundles['soda_scs_component']['soda_scs_filesystem_component'] = [
    'label' => new TranslatableMarkup('Filesystem'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('A filesystem for storage of structured data. <a href="/app/filesystem">Learn more</a>'),
    'imageUrl' => 'public://soda_scs_manager/images/filesystem.svg',
    'tags' => ['filesharing'],
  ];

  $bundles['soda_scs_component']['soda_scs_sql_component'] = [
    'label' => new TranslatableMarkup('SQL Database'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('A relational database for storage of structured data. <a href="/app/sql">Learn more</a>'),
    'imageUrl' => 'public://soda_scs_manager/images/sql.svg',
    'tags' => ['database'],
  ];

  $bundles['soda_scs_component']['soda_scs_triplestore_component'] = [
    'label' => new TranslatableMarkup('Triplestore'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('Graph database for storage of RDF data. <a href="/app/triplestore">Learn more</a>'),
    'imageUrl' => 'public://soda_scs_manager/images/triplestore.svg',
    'tags' => ['database', 'triplestore'],
  ];

  $bundles['soda_scs_component']['soda_scs_webprotege_component'] = [
    'label' => new TranslatableMarkup('WebProtégé'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('A web-based tool for creating and editing OWL ontologies. Webprotege is not yet part of the Single Sign On (SSO) system. You will need to create an account and log in manually. <a href="/app/webprotege">Learn more</a>'),
    'imageUrl' => 'public://soda_scs_manager/images/protege.svg',
    'tags' => ['ontology'],
  ];

  $bundles['soda_scs_component']['soda_scs_wisski_component'] = [
    'label' => new TranslatableMarkup('WissKI'),
    'class' => SodaScsComponentBundle::class,
    'description' => new TranslatableMarkup('A plain WissKI instance without data model and preconfigured triplestore connection.'),
    'imageUrl' => 'public://soda_scs_manager/images/wisski.svg',
    'tags' => ['ontology', 'cms'],
  ];

  // Projects.
  $bundles['soda_scs_project']['default'] = [
    'label' => new TranslatableMarkup('Default Project'),
    'class' => SodaScsProjectsBundle::class,
    'description' => new TranslatableMarkup('A Project is a collection of components and stacks.'),
  ];

  // Service Keys.
  $bundles['soda_scs_service_key']['default'] = [
    'label' => new TranslatableMarkup('Default Service Key'),
    'class' => SodaScsServiceKeyBundle::class,
    'description' => new TranslatableMarkup('A Service Key is a key for a service.'),
  ];

  // Stacks.
  $bundles['soda_scs_stack']['soda_scs_jupyter_stack'] = [
    'label' => new TranslatableMarkup('JupyterLab'),
    'class' => SodaScsStackBundle::class,
    'description' => new TranslatableMarkup('A JupyterLab environment contains Jupyter Notebooks and OpenRefine. <a href="/app/jupyterlab">Learn more</a>'),
    'imageUrl' => 'public://soda_scs_manager/images/jupyterhub-stack.svg',
    'tags' => ['coding', 'data-science', 'data-cleaning'],
  ];

  $bundles['soda_scs_stack']['soda_scs_wisski_stack'] = [
    'label' => new TranslatableMarkup('WissKI Environment'),
    'class' => SodaScsStackBundle::class,
    'description' => new TranslatableMarkup('A WissKI environment contains a preconfigured WissKI, a Triplestore and a Database.'),
    'imageUrl' => 'public://soda_scs_manager/images/wisski-stack.svg',
    'tags' => ['cms', 'database', 'ontology', 'publishing', 'triplestore'],
  ];

  $bundles['soda_scs_stack']['soda_scs_nextcloud_stack'] = [
    'label' => new TranslatableMarkup('Nextcloud'),
    'class' => SodaScsStackBundle::class,
    'description' => new TranslatableMarkup('A Nextcloud Environment contains Nextcloud, Draw.io and OnlyOffice. <a href="/app/nextcloud">Learn more</a>'),
    'imageUrl' => 'public://soda_scs_manager/images/nextcloud-stack.svg',
    'tags' => ['filesharing', 'office', 'publishing'],
  ];

  return $bundles;
}

/**
 * Implements hook_entity_field_storage_info().
 *
 * Defines storage for all bundle fields.
 */
function soda_scs_manager_entity_field_storage_info(EntityTypeInterface $entity_type) {
  if (in_array($entity_type->id(), ['soda_scs_component', 'soda_scs_project', 'soda_scs_service_key', 'soda_scs_stack'])) {
    $definitions = [];
    $bundles = \Drupal::service('entity_type.bundle.info')->getBundleInfo($entity_type->id());
    foreach ($bundles as $bundle_id => $bundle_info) {
      if (isset($bundle_info['class'])) {
        $class = '\\' . $bundle_info['class'];
        if (class_exists($class)) {
          $bundle_defs = $class::bundleFieldDefinitions($entity_type, $bundle_id, []);
          $definitions = array_merge($definitions, $bundle_defs);
        }
      }
    }
    return $definitions;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form.
 */
function soda_scs_manager_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  // Disable native Drupal registration by redirecting to our custom form.
  $response = new RedirectResponse(Url::fromRoute('soda_scs_manager.user_registration')->toString());
  $response->send();
  exit;
}

/**
 * Implements hook_help().
 */
function soda_scs_manager_help($route_name, RouteMatchInterface $route_match) {
  $output = '';

  switch ($route_name) {
    case 'help.page.soda_scs_manager':
      $output .= '<h3>' . new TranslatableMarkup('About') . '</h3>';
      $output .= '<p>' . new TranslatableMarkup('This module provides the functionality to create, validate and manage WissKI Cloud accounts.') . '</p>';

      $output .= '<h3>' . new TranslatableMarkup('Configuration') . '</h3>';
      $output .= '<p>' . new TranslatableMarkup('Configuration is done on the <a href="@settingsPage" targer="_blank">settings page</a>.', ['@settingsPage' => '/admin/config/wisski-cloud-account-manager/settings']) . '</p>';

      $output .= '<h3>' . new TranslatableMarkup('Create WissKI Cloud Account') . '</h3>';
      $output .= '<p>' . new TranslatableMarkup('<a href="@createPage" targer="_blank">This page</a> allows you to create a WissKI Cloud account.', ['@createPage' => '/wisski-cloud-account-manager/create']) . '</p>';

      $output .= '<h3>' . new TranslatableMarkup('Validate WissKI Cloud Account') . '</h3>';
      $output .= '<p>' . new TranslatableMarkup('<a href="@validationPage" targer="_blank">This page</a> allows you to validate your account and check the status of the provision.', ['@validationPage' => '/wisski-cloud-account-manager/validate/GsyMv5DdFhPCixL1wTLZhzFg7sVDOiHq']) . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_mail().
 */
function soda_scs_manager_mail($key, &$message, $params) {
  $options = [
    'langcode' => $message['langcode'],
  ];

  $site_config = \Drupal::config('system.site');
  $site_name = $site_config->get('name');

  switch ($key) {
    case 'registration_admin_notification':
      $message['subject'] = \Drupal::translation()->translate('New user registration on @site_name', ['@site_name' => $site_name], $options);
      $message['body'][] = \Drupal::translation()->translate('A new user has registered on @site_name.', ['@site_name' => $site_name], $options);
      $message['body'][] = \Drupal::translation()->translate('Username: @username', ['@username' => $params['username']], $options);
      $message['body'][] = \Drupal::translation()->translate('Email: @email', ['@email' => $params['email']], $options);
      $message['body'][] = \Drupal::translation()->translate('Name: @first_name @last_name', [
        '@first_name' => $params['first_name'],
        '@last_name' => $params['last_name'],
      ], $options);
      $message['body'][] = \Drupal::translation()->translate('To approve or reject this registration, visit: @url', [
        '@url' => Url::fromRoute('soda_scs_manager.user_registration_approvals')
          ->setAbsolute()
          ->toString(),
      ], $options);
      break;

    case 'registration_user_notification':
      $message['subject'] = \Drupal::translation()->translate('Your registration on @site_name', ['@site_name' => $site_name], $options);
      $message['body'][] = \Drupal::translation()->translate('Hello @username,', ['@username' => $params['username']], $options);
      $message['body'][] = \Drupal::translation()->translate('Thank you for registering on @site_name.', ['@site_name' => $site_name], $options);
      $message['body'][] = \Drupal::translation()->translate('Your registration is pending administrator approval. You will receive another email once your account is approved or rejected.', [], $options);
      break;

    case 'registration_approval':
      $message['subject'] = \Drupal::translation()->translate('Your account on @site_name has been approved', ['@site_name' => $site_name], $options);
      $message['body'][] = \Drupal::translation()->translate('Hello @username,', ['@username' => $params['username']], $options);
      $message['body'][] = \Drupal::translation()->translate('Your registration on @site_name has been approved.', ['@site_name' => $site_name], $options);
      $message['body'][] = \Drupal::translation()->translate('You can now log in at: @login_url', ['@login_url' => $params['login_url']], $options);
      $message['body'][] = \Drupal::translation()->translate('For security reasons, you will need to reset your password when you first log in.', [], $options);
      break;

    case 'registration_rejection':
      $message['subject'] = \Drupal::translation()->translate('Your account on @site_name was not approved', ['@site_name' => $site_name], $options);
      $message['body'][] = \Drupal::translation()->translate('Hello @username,', ['@username' => $params['username']], $options);
      $message['body'][] = \Drupal::translation()->translate('Your registration on @site_name has been reviewed and was not approved at this time.', ['@site_name' => $site_name], $options);
      $message['body'][] = \Drupal::translation()->translate('If you believe this is an error, please contact the site administrators.', [], $options);
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function soda_scs_manager_preprocess_soda_scs_component(array &$variables) {
  $variables['#attached']['library'][] = 'soda_scs_manager/health_status';
}

/**
 * Implements hook_ENTITY_TYPE_delete() for soda_scs_component entities.
 *
 * Deletes the connectedComponents field on
 * projects when a component is deleted.
 */
function soda_scs_manager_soda_scs_component_delete(SodaScsComponent $entity) {
  _soda_scs_manager_sync_component_project_relationship($entity);
}

/**
 * Implements hook_ENTITY_TYPE_insert() for soda_scs_component entities.
 *
 * Updates the connectedComponents field on
 * projects when a component is created.
 */
function soda_scs_manager_soda_scs_component_insert(SodaScsComponent $entity) {
  _soda_scs_manager_sync_component_project_relationship($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update() for soda_scs_component entities.
 *
 * Updates the connectedComponents field on
 * projects when a component is updated.
 */
function soda_scs_manager_soda_scs_component_update(SodaScsComponent $entity) {
  _soda_scs_manager_sync_component_project_relationship($entity);
}

/**
 * Implements hook_ENTITY_TYPE_view() for soda_scs_component entities.
 */
function soda_scs_manager_soda_scs_component_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->getEntityTypeId() === 'soda_scs_component') {
    // Check if the imageUrl field has a value.
    /** @var \Drupal\soda_scs_manager\Entity\SodaScsComponentInterface $entity */
    if ($imageUrl = $entity->get('imageUrl')->value) {
      $imageUrl = Drupal::service('file_url_generator')->generateAbsoluteString($imageUrl);
      $build['#attached']['library'][] = 'soda_scs_manager/globalStyling';
      // Add a custom render array for the imageUrl field.
      $build['imageUrl'] = [
        '#type' => 'markup',
        '#markup' => '<img class="img-thumbnail soda-scs-manager--img--thumbnail" src="' . $imageUrl . '" alt="Image description" />',
        // Ensure proper sanitization of the URL.
        '#allowed_tags' => ['img'],
      // Adjust the weight as needed.
        '#weight' => 10,
      ];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert() for soda_scs_project entities.
 *
 * Updates the partOfProjects field on components when a project is created.
 */
function soda_scs_manager_soda_scs_project_insert(SodaScsProject $entity) {
  _soda_scs_manager_sync_project_component_relationship($entity);
}

/**
 * Implements hook_ENTITY_TYPE_delete() for soda_scs_project entities.
 *
 * Deletes the partOfProjects field on components when a project is deleted.
 */
function soda_scs_manager_soda_scs_project_delete(SodaScsProject $entity) {
  _soda_scs_manager_sync_project_component_relationship($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update() for soda_scs_project entities.
 *
 * Updates the partOfProjects field on components when a project is updated.
 */
function soda_scs_manager_soda_scs_project_update(SodaScsProject $entity) {
  _soda_scs_manager_sync_project_component_relationship($entity);
}

/**
 * Implements hook_ENTITY_TYPE_view() for soda_scs_component entities.
 */
function soda_scs_manager_soda_scs_stack_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->getEntityTypeId() === 'soda_scs_stack') {
    // Check if the imageUrl field has a value.
    /** @var \Drupal\soda_scs_manager\Entity\SodaScsComponentInterface $entity */
    if ($imageUrl = $entity->get('imageUrl')->value) {
      $imageUrl = Drupal::service('file_url_generator')->generateAbsoluteString($imageUrl);
      $build['#attached']['library'][] = 'soda_scs_manager/globalStyling';
      // Add a custom render array for the imageUrl field.
      $build['imageUrl'] = [
        '#type' => 'markup',
        '#markup' => '<img class="img-thumbnail soda-scs-manager--img--thumbnail" src="' . $imageUrl . '" alt="Image description" />',
        // Ensure proper sanitization of the URL.
        '#allowed_tags' => ['img'],
      // Adjust the weight as needed.
        '#weight' => 10,
      ];
    }
  }
}

/**
 * Implements hook_theme().
 */
function soda_scs_manager_theme($existing, $type, $theme, $path) {
  return [
    'soda_scs_entity' => [
      'render element' => 'elements',
      'template' => 'entity/soda-scs-entity',
    ],
    'soda_scs_manager__catalogue' => [
      'variables' => [
        'components' => NULL,
        'stacks' => NULL,
        'attributes' => NULL,
      ],
      'template' => 'pages/soda-scs-manager--catalogue',
    ],
    'soda_scs_manager__dashboard' => [
      'variables' => [
        'entitiesByUser' => NULL,
        'entity_type' => NULL,
        'attributes' => NULL,
      ],
      'template' => 'pages/soda-scs-manager--dashboard',
    ],
    'soda_scs_manager__entity_card' => [
      'variables' => [
        'description' => NULL,
        'imageUrl' => NULL,
        'tags' => NULL,
        'title' => NULL,
        'type' => NULL,
        'url' => NULL,
      ],
      'template' => 'cards/soda-scs-manager--entity-card',
    ],
    'soda_scs_manager__start_page' => [
      'variables' => [
        'attributes' => NULL,
        'user' => NULL,
      ],
      'template' => 'pages/soda-scs-manager--start-page',
    ],

  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function soda_scs_manager_theme_suggestions_soda_scs_component(array $variables) {
  $suggestions = [];

  /** @var \Drupal\soda_scs_manager\Entity\SodaScsComponent $entity */
  $entity = $variables['elements']['#soda_scs_component'];
  $view_mode = $variables['elements']['#view_mode'];

  // Add suggestion based on bundle.
  $suggestions[] = 'soda_scs_component__' . $entity->bundle();

  // Add suggestion based on view mode.
  $suggestions[] = 'soda_scs_component__' . $view_mode;

  // Add suggestion based on bundle and view mode.
  $suggestions[] = 'soda_scs_component__' . $entity->bundle() . '__' . $view_mode;

  // Add suggestion based on entity ID.
  $suggestions[] = 'soda_scs_component__' . $entity->id();

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function soda_scs_manager_theme_suggestions_soda_scs_component_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\soda_scs_manager\Entity\SodaScsComponent $entity */
  $entity = $variables['elements']['#soda_scs_component'];

  // Add custom suggestions based on specific conditions.
  if ($entity->hasField('tags') && !$entity->get('tags')->isEmpty()) {
    $suggestions[] = 'soda_scs_component__with_tags';
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete() for soda_scs_snapshot entities.
 *
 * Ensures connected file entities and on-disk files are deleted if unused.
 * Also removes the snapshot from referencing entities' snapshots fields.
 */
function soda_scs_manager_soda_scs_snapshot_delete(SodaScsSnapshot $snapshot) {
  $logger = \Drupal::logger('soda_scs_manager');

  // Attempt to delete the snapshot directory if present.
  try {
    $snapshotDirectory = $snapshot->get('dir')->value;
    if (is_string($snapshotDirectory) && $snapshotDirectory !== '') {
      /** @var \Drupal\soda_scs_manager\Helpers\SodaScsSnapshotHelpers $helpers */
      $helpers = \Drupal::service('soda_scs_manager.snapshot.helpers');
      $helpers->deleteSnapshotDirectory($snapshotDirectory);
    }
  }
  catch (\Throwable $e) {
    $logger->error('Failed to delete snapshot directory for snapshot @id: @message', [
      '@id' => $snapshot->id(),
      '@message' => $e->getMessage(),
    ]);
  }

  // Collect referenced files (archive and checksum).
  $referencedFiles = [];
  if (!$snapshot->get('file')->isEmpty() && $snapshot->get('file')->entity) {
    $referencedFiles[] = $snapshot->get('file')->entity;
  }
  if (!$snapshot->get('checksumFile')->isEmpty() && $snapshot->get('checksumFile')->entity) {
    $referencedFiles[] = $snapshot->get('checksumFile')->entity;
  }

  /** @var \Drupal\file\FileUsage\FileUsageInterface $fileUsage */
  $fileUsage = \Drupal::service('file.usage');
  $snapshotStorage = \Drupal::entityTypeManager()->getStorage('soda_scs_snapshot');

  foreach ($referencedFiles as $file) {
    try {
      $fid = (int) $file->id();

      // Check file usage service.
      $usage = $fileUsage->listUsage($file);

      // Double-check via entity query on snapshot fields.
      $query = $snapshotStorage->getQuery()->accessCheck(FALSE);
      $or = $query->orConditionGroup()
        ->condition('file.target_id', $fid)
        ->condition('checksumFile.target_id', $fid);
      $referencingSnapshotIds = $query->condition($or)->execute();

      if (empty($usage) && empty($referencingSnapshotIds)) {
        $file->delete();
      }
    }
    catch (\Throwable $e) {
      $logger->error('Failed to delete file @fid for snapshot @id: @message', [
        '@fid' => $file->id(),
        '@id' => $snapshot->id(),
        '@message' => $e->getMessage(),
      ]);
    }
  }

  // Remove this snapshot from referencing entities' snapshots fields.
  try {
    $snapshotId = (int) $snapshot->id();
    $entityTypeManager = \Drupal::entityTypeManager();

    // Components.
    $componentStorage = $entityTypeManager->getStorage('soda_scs_component');
    $componentIds = $componentStorage->getQuery()
      ->condition('snapshots', $snapshotId)
      ->accessCheck(FALSE)
      ->execute();
    if (!empty($componentIds)) {
      /** @var \Drupal\soda_scs_manager\Entity\SodaScsComponent[] $components */
      $components = $componentStorage->loadMultiple($componentIds);
      foreach ($components as $component) {
        $values = $component->get('snapshots')->getValue();
        $filtered = [];
        foreach ($values as $item) {
          if ((int) ($item['target_id'] ?? 0) !== $snapshotId) {
            $filtered[] = $item;
          }
        }
        if (count($filtered) !== count($values)) {
          $component->set('snapshots', $filtered);
          $component->save();
        }
      }
    }

    // Stacks.
    $stackStorage = $entityTypeManager->getStorage('soda_scs_stack');
    $stackIds = $stackStorage->getQuery()
      ->condition('snapshots', $snapshotId)
      ->accessCheck(FALSE)
      ->execute();
    if (!empty($stackIds)) {
      /** @var \Drupal\soda_scs_manager\Entity\SodaScsStack[] $stacks */
      $stacks = $stackStorage->loadMultiple($stackIds);
      foreach ($stacks as $stack) {
        $values = $stack->get('snapshots')->getValue();
        $filtered = [];
        foreach ($values as $item) {
          if ((int) ($item['target_id'] ?? 0) !== $snapshotId) {
            $filtered[] = $item;
          }
        }
        if (count($filtered) !== count($values)) {
          $stack->set('snapshots', $filtered);
          $stack->save();
        }
      }
    }
  }
  catch (\Throwable $e) {
    $logger->error('Failed to remove snapshot @id from referencing entities: @message', [
      '@id' => $snapshot->id(),
      '@message' => $e->getMessage(),
    ]);
  }
}

/**
 * Implements hook_user_delete().
 *
 * Deletes a user from Keycloak when a Drupal user is deleted.
 * Also deletes the user's snapshots, components, stacks, projects,
 * service keys, and enities.
 */
function soda_scs_manager_user_delete(UserInterface $user) {
  // Get the Keycloak service user actions.
  $keycloakServiceUserActions = \Drupal::service('soda_scs_manager.keycloak_service.user.actions');
  // Get the service helpers.
  $serviceHelpers = \Drupal::service('soda_scs_manager.service.helpers');
  // Get the logger.
  $logger = \Drupal::logger('soda_scs_manager');
  // Get the messenger.
  $messenger = \Drupal::messenger();

  // Log the user deletion.
  $logger->notice('Deleting user from Keycloak: @username', ['@username' => $user->getAccountName()]);

  try {

    // Get Keycloak settings.
    $keycloakGeneralSettings = $serviceHelpers->initKeycloakGeneralSettings();

    // First get a token for Keycloak API authentication.
    $tokenRequest = $keycloakServiceUserActions->buildTokenRequest([]);
    $tokenResponse = $keycloakServiceUserActions->makeRequest($tokenRequest);

    if (!$tokenResponse['success']) {
      $logger->error('Failed to get Keycloak token for user deletion: @error', ['@error' => $tokenResponse['error']]);
      return;
    }

    // Extract the access token.
    $tokenData = json_decode($tokenResponse['data']['keycloakResponse']->getBody()->getContents(), TRUE);
    $accessToken = $tokenData['access_token'];

    // Set the type.
    $deleteUserParams['type'] = 'user';
    // Set the token.
    $deleteUserParams['token'] = $accessToken;
    // Extract the Keycloak user ID.
    $deleteUserParams['routeParams'] = [
      'realm' => $keycloakGeneralSettings['realm'],
      // @todo Create user helper service for this.
      'userId' => \Drupal::service('soda_scs_manager.project.helpers')->getUserSsoUuid($user),
    ];

    // Build the delete request.
    $deleteUserRequest = $keycloakServiceUserActions->buildDeleteRequest($deleteUserParams);
    // Make the deleterequest.
    $deleteUserResponse = $keycloakServiceUserActions->makeRequest($deleteUserRequest);

    if ($deleteUserResponse['success']) {
      $messenger->addMessage(\Drupal::translation()->translate('Successfully deleted user from Keycloak: @username (ID: @id)', [
        '@username' => $user->getAccountName(),
        '@id' => $deleteUserParams['routeParams']['userId'],
      ]));
      $logger->notice('Successfully deleted user from Keycloak: @username (ID: @id)', [
        '@username' => $user->getAccountName(),
        '@id' => $deleteUserParams['routeParams']['userId'],
      ]);
    }
    else {
      $logger->error('Failed to delete user from Keycloak: @error', ['@error' => $deleteUserResponse['error']]);
    }
  }
  catch (\Exception $e) {
    $messenger->addError(\Drupal::translation()->translate('Failed to delete user from Keycloak: @error', [
      '@error' => $e->getMessage(),
    ]));
    $logger->error('Error deleting user @username from Keycloak: @error', [
      '@username' => $user->getDisplayName(),
      '@error' => $e->getMessage(),
    ]);
  }

  // Clean database users.
  $cleanDatabaseUsers = \Drupal::service('soda_scs_manager.sql_service.actions')->cleanServiceUsers($user->getDisplayName());

  if ($cleanDatabaseUsers['success']) {
    $messenger->addMessage(\Drupal::translation()->translate('Successfully cleaned database users for user: @username', ['@username' => $user->getDisplayName()]));
    $logger->notice('Successfully cleaned database users for user: @username', ['@username' => $user->getDisplayName()]);
  }
  else {
    $messenger->addError(\Drupal::translation()->translate('Failed to clean database users for user: @username', ['@username' => $user->getDisplayName()]));
    $logger->error('Failed to clean database users for user: @username. @message @error', [
      '@username' => $user->getDisplayName(),
      '@message' => $cleanDatabaseUsers['message'],
      '@error' => $cleanDatabaseUsers['error'],
    ]);
  }

  // Clean triplestore users.
  $tsDeleteRequestParams = [
    'type' => 'user',
    'queryParams' => [],
    'routeParams' => [
      'username' => $user->getDisplayName(),
    ],
  ];
  $cleanTriplestoreUsers = \Drupal::service('soda_scs_manager.opengdb_service.actions')->buildDeleteRequest($tsDeleteRequestParams);

  if ($cleanTriplestoreUsers['success']) {
    $messenger->addMessage(\Drupal::translation()->translate('Successfully cleaned triplestore users for user: @username', ['@username' => $user->getDisplayName()]));
  }
  else {
    $messenger->addError(\Drupal::translation()->translate('Failed to clean triplestore users for user: @username', ['@username' => $user->getDisplayName()]));
    $logger->error('Failed to clean triplestore users for user: @username. @message @error', [
      '@username' => $user->getDisplayName(),
      '@message' => $cleanTriplestoreUsers['message'],
      '@error' => $cleanTriplestoreUsers['error'],
    ]);
  }
  // Clean enities.
  $snapshots = SodaScsSnapshot::loadByOwner($user->id());
  foreach ($snapshots as $snapshot) {
    $snapshot->delete();
  }

  $components = SodaScsComponent::loadByOwner($user->id());
  foreach ($components as $component) {
    $component->delete();
  }
  $messenger->addMessage(\Drupal::translation()->translate('Successfully deleted @count components for user @username', [
    '@count' => count($components),
    '@username' => $user->getDisplayName(),
  ]));
  $stacks = SodaScsStack::loadByOwner($user->id());
  foreach ($stacks as $stack) {
    $stack->delete();
  }
  $messenger->addMessage(\Drupal::translation()->translate('Successfully deleted @count stacks for user @username', [
    '@count' => count($stacks),
    '@username' => $user->getDisplayName(),
  ]));
  $projects = SodaScsProject::loadByOwner($user->id());
  foreach ($projects as $project) {
    $project->delete();
  }
  $messenger->addMessage(\Drupal::translation()->translate('Successfully deleted @count projects for user @username', [
    '@count' => count($projects),
    '@username' => $user->getDisplayName(),
  ]));
  $servicekeys = SodaScsServiceKey::loadByOwner($user->id());
  foreach ($servicekeys as $servicekey) {
    $servicekey->delete();
  }
  $messenger->addMessage(\Drupal::translation()->translate('Successfully deleted @count service keys for user @username', [
    '@count' => count($servicekeys),
    '@username' => $user->getDisplayName(),
  ]));
}

/**
 * Implements hook_user_insert().
 */
function soda_scs_manager_user_insert(UserInterface $user) {

  // Set the user status to active by default.
  if (!$user->isActive()) {
    $user->activate();
  }

  // Assign the scs_user role to the new user.
  if (!$user->hasRole('scs_user')) {
    $user->addRole('scs_user');
  }

  // Save the updated user.
  $user->save();

  // Ensure the role exists and has the required permissions.
  _soda_scs_manager_ensure_scs_user_role();
  _soda_scs_manager_create_default_project_for_user($user);
  _soda_scs_manager_create_default_applications_for_user($user);
  _soda_scs_manager_propagate_keycloak_user_data_to_fields($user);
}

/**
 * Implements hook_page_attachments().
 *
 * Attaches the globalStyling library to all pages when the module is enabled.
 */
function soda_scs_manager_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'soda_scs_manager/globalStyling';
}

/**
 * Implements hook_user_login().
 *
 * Redirects users to the SODa SCS Manager start page after login.
 */
function soda_scs_manager_user_login(UserInterface $account) {
  // Get the current request.
  $request = \Drupal::request();

  // Only redirect if there's no existing
  // destination and not during AJAX requests.
  if (!$request->query->has('destination') && !$request->isXmlHttpRequest()) {
    // Redirect to the SODa SCS Manager start page.
    $response = new RedirectResponse(Url::fromRoute('soda_scs_manager.start_page')->toString());
    $response->send();
  }
}

/**
 * Implements hook_file_download().
 *
 * Controls access to private snapshot files.
 */
function soda_scs_manager_file_download($uri) {
  // Only handle private files in the snapshots directory.
  $streamWrapperManager = \Drupal::service('stream_wrapper_manager');
  $scheme = $streamWrapperManager->getScheme($uri);
  if ($scheme !== 'private') {
    return NULL;
  }
  $target = $streamWrapperManager->getTarget($uri);
  if (!\str_starts_with($target, 'snapshots/')) {
    return NULL;
  }

  $account = \Drupal::currentUser();

  // Admins can always download.
  if ($account->hasPermission('soda scs manager admin')) {
    $mimeType = 'application/octet-stream';
    if ($file = \Drupal::service('file.repository')->loadByUri($uri)) {
      $mimeType = $file->getMimeType() ?: $mimeType;
    }
    return [
      'Content-Type' => $mimeType,
      'Content-Disposition' => 'attachment; filename="' . basename($uri) . '"',
    ];
  }

  // Require the generic permission first.
  if (!$account->hasPermission('view soda scs snapshot')) {
    return -1;
  }

  // Resolve the file entity by URI.
  /** @var \Drupal\file\FileInterface|null $file */
  $fileRepository = \Drupal::service('file.repository');
  $normalizedUri = $scheme . '://' . ltrim($target, '/');
  $alternativeUri = $scheme . ':///' . ltrim($target, '/');
  $file = $fileRepository->loadByUri($uri)
    ?: $fileRepository->loadByUri($normalizedUri)
    ?: $fileRepository->loadByUri($alternativeUri);
  if (!$file) {
    // Unknown file in private snapshots path. Deny to avoid leakage.
    return -1;
  }

  $fid = (int) $file->id();

  // Find snapshots that reference this file (either main file or signature).
  $storage = \Drupal::entityTypeManager()->getStorage('soda_scs_snapshot');
  $query = $storage->getQuery()
    ->accessCheck(FALSE);

  $or = $query->orConditionGroup()
    ->condition('file.target_id', $fid)
    ->condition('checksumFile.target_id', $fid);

  // Enforce owner-based access.
  $query
    ->condition($or)
    ->condition('owner', (int) $account->id());

  $ids = $query->execute();

  if (empty($ids)) {
    // No snapshot owned by the user references this file.
    return -1;
  }

  // Optionally, double-check access on any referencing snapshot.
  $snapshots = $storage->loadMultiple($ids);
  foreach ($snapshots as $snapshot) {
    /** @var \Drupal\soda_scs_manager\Entity\SodaScsSnapshot $snapshot */
    if ((int) $snapshot->get('owner')->target_id === (int) $account->id()) {
      $mimeType = $file->getMimeType() ?: 'application/octet-stream';
      return [
        'Content-Type' => $mimeType,
        'Content-Disposition' => 'attachment; filename="' . basename($uri) . '"',
      ];
    }
  }

  return -1;
}

/**
 * Create default applications for new user.
 */
function _soda_scs_manager_create_default_applications_for_user(UserInterface $user) {
  // Get the default project for the user.
  $projects = SodaScsProject::loadByOwner($user->id());

  if (empty($projects) || count($projects) > 1) {
    $messenger = \Drupal::messenger();
    $messenger->addError(\Drupal::translation()->translate('Failed to create default applications for user: @username. No default project found.', ['@username' => $user->getDisplayName()]));
    $logger = \Drupal::logger('soda_scs_manager');
    $logger->error('Failed to create default applications for user: @username. No default project found.', ['@username' => $user->getDisplayName()]);
    return;
  }

  // Get the default project. Should only be one.
  /** @var \Drupal\soda_scs_manager\Entity\SodaScsProject $project */
  $project = reset($projects);

  _soda_scs_manager_create_default_filesystem_for_user($user, $project);
  _soda_scs_manager_create_default_nextcloud_for_user($user, $project);
  _soda_scs_manager_create_default_jupyter_for_user($user, $project);
  _soda_scs_manager_create_default_webprotege_for_user($user, $project);
}

/**
 * Create default project for new user.
 *
 * The groupId is now automatically set in the insert hook to avoid double save.
 */
function _soda_scs_manager_create_default_project_for_user(UserInterface $user) {

  $project = SodaScsProject::create([
    'bundle' => 'default',
    'label' => $user->getDisplayName() . '\'s default project',
    'owner' => $user->id(),
  ]);

  $project->save();

  /** @var \Drupal\soda_scs_manager\Helpers\SodaScsProjectHelpers $projectHelpers */
  $projectHelpers = \Drupal::service('soda_scs_manager.project.helpers');
  $kcToken = $projectHelpers->getKeycloakToken();
  if (!$kcToken) {
    return;
  }

  $createProjectGroupResult = $projectHelpers->createProjectGroup($project);
  if (!$createProjectGroupResult->success) {
    return;
  }
  $keycloakUuid = $createProjectGroupResult->data['keycloakGroupData']->uuid;

  if (is_string($keycloakUuid) && $keycloakUuid !== '') {
    $project->set('keycloakUuid', $keycloakUuid);
  }

  $project->save();

  // Set the default project for the user.
  $user->set('default_project', $project->id());
  $user->save();

  // Sync user and keycloak groups.
  $syncKeycloakGroupMembersResult = \Drupal::service('soda_scs_manager.project.helpers')->syncKeycloakGroupMembers($project);
  if (!$syncKeycloakGroupMembersResult->success) {
    $messenger = \Drupal::messenger();
    $messenger->addError(\Drupal::translation()->translate('Failed to sync user and keycloak groups for user: @username. @error', [
      '@username' => $user->getDisplayName(),
      '@error' => $syncKeycloakGroupMembersResult->error,
    ]));
    $logger = \Drupal::logger('soda_scs_manager');
    $logger->error('Failed to sync user and keycloak groups for user: @username. @error', [
      '@username' => $user->getDisplayName(),
      '@error' => $syncKeycloakGroupMembersResult->error,
    ]);
  }
  else {
    $messenger = \Drupal::messenger();
    $messenger->addMessage(\Drupal::translation()->translate('Successfully synced user and keycloak groups for user: @username', ['@username' => $user->getDisplayName()]));
    $logger = \Drupal::logger('soda_scs_manager');
    $logger->notice('Successfully synced user and keycloak groups for user: @username', ['@username' => $user->getDisplayName()]);
  }
}

/**
 * Create default filesystem for new user.
 */
function _soda_scs_manager_create_default_filesystem_for_user(UserInterface $user, SodaScsProject $project) {

  // Create the default filesystem.
  $filesystem = SodaScsComponent::create([
    'bundle' => 'soda_scs_filesystem_component',
    'description' => 'The default filesystem for the user.',
    'imageUrl' => 'public://soda_scs_manager/images/filesystem.svg',
    'health' => 'Unknown',
    'label' => $user->getDisplayName() . '\'s default filesystem',
    // Why fs- prefix is not necessary?
    'machineName' => $user->getDisplayName() . '-default',
    'owner' => $user->id(),
    'partOfProjects' => [
      [
        'target_id' => $project->id(),
      ],
    ],
  ]);

  \Drupal::service('soda_scs_manager.component.actions')->createComponent($filesystem);
}

/**
 * Create default nextcloud for new user.
 */
function _soda_scs_manager_create_default_nextcloud_for_user(UserInterface $user, SodaScsProject $project) {
  // Load the bundle info for the nextcloud stack.
  $bundleinfo = \Drupal::service('entity_type.bundle.info')->getBundleInfo('soda_scs_stack')['soda_scs_nextcloud_stack'];

  if (!$bundleinfo) {
    throw new \Exception('Nextcloud stack bundle info not found');
  }

  $nextcloud = SodaScsStack::create([
    'bundle' => 'soda_scs_nextcloud_stack',
    'description' => $bundleinfo['description'],
    'imageUrl' => $bundleinfo['imageUrl'],
    'label' => $user->getDisplayName() . '\'s nextcloud',
    'machineName' => 'nextcloud-' . $user->getDisplayName() . '-default',
    'owner' => $user->id(),
    'partOfProjects' => [
      [
        'target_id' => $project->id(),
      ],
    ],
  ]);

  \Drupal::service('soda_scs_manager.stack.actions')->createStack($nextcloud);
}

/**
 * Create default jupyter for new user.
 */
function _soda_scs_manager_create_default_jupyter_for_user(UserInterface $user, SodaScsProject $project) {
  // Load the bundle info for the jupyter stack.
  $bundleinfo = \Drupal::service('entity_type.bundle.info')->getBundleInfo('soda_scs_stack')['soda_scs_jupyter_stack'];

  if (!$bundleinfo) {
    throw new \Exception('Jupyter stack bundle info not found');
  }

  $jupyter = SodaScsStack::create([
    'bundle' => 'soda_scs_jupyter_stack',
    'description' => $bundleinfo['description'],
    'imageUrl' => $bundleinfo['imageUrl'],
    'label' => $user->getDisplayName() . '\'s jupyter',
    'machineName' => 'jupyter-' . $user->getDisplayName() . '-default',
    'owner' => $user->id(),
    'partOfProjects' => [
      [
        'target_id' => $project->id(),
      ],
    ],
  ]);

  \Drupal::service('soda_scs_manager.stack.actions')->createStack($jupyter);
}

/**
 * Create default webprotege for new user.
 */
function _soda_scs_manager_create_default_webprotege_for_user(UserInterface $user, SodaScsProject $project) {
  // Load the bundle info for the webprotege stack.
  $bundleinfo = \Drupal::service('entity_type.bundle.info')->getBundleInfo('soda_scs_component')['soda_scs_webprotege_component'];

  if (!$bundleinfo) {
    throw new \Exception('Webprotege stack bundle info not found');
  }

  $webprotege = SodaScsComponent::create([
    'bundle' => 'soda_scs_webprotege_component',
    'description' => $bundleinfo['description'],
    'imageUrl' => $bundleinfo['imageUrl'],
    'label' => $user->getDisplayName() . '\'s webprotege',
    'machineName' => 'webprotege-' . $user->getDisplayName() . '-default',
    'owner' => $user->id(),
    'partOfProjects' => [
      [
        'target_id' => $project->id(),
      ],
    ],
  ]);

  \Drupal::service('soda_scs_manager.component.actions')->createComponent($webprotege);
}

/**
 * Ensure the scs_user role exists and has the required permissions.
 */
function _soda_scs_manager_ensure_scs_user_role() {
  // Get the role storage.
  $role_storage = \Drupal::entityTypeManager()->getStorage('user_role');

  // Create the custom role if it doesn't exist.
  if (!$role_storage->load('scs_user')) {
    $role = $role_storage->create(['id' => 'scs_user', 'label' => 'scs_user']);
    $role->save();
  }

  // Assign the required permissions to the custom role.
  $permissions = [
    'create soda scs component',
    'create soda scs project',
    'create soda scs service key',
    'create soda scs snapshot',
    'create soda scs stack',
    'delete soda scs component',
    'delete soda scs project',
    'delete soda scs service key',
    'delete soda scs snapshot',
    'delete soda scs stack',
    'soda scs manager user',
    'view soda scs component',
    'view soda scs project',
    'view soda scs service key',
    'view soda scs snapshot',
    'view soda scs stack',
  ];

  user_role_grant_permissions('scs_user', $permissions);
}

/**
 * Propagate Keycloak user data to fields.
 */
function _soda_scs_manager_propagate_keycloak_user_data_to_fields(UserInterface $user) {
  $keycloakService = \Drupal::service('soda_scs_manager.keycloak_service.helpers');

  $keycloakToken = $keycloakService->getKeycloakToken();
  $keycloakUser = $keycloakService->getKeycloakUser($keycloakToken, $user->getDisplayName());

  // If Keycloak data is available, propagate it to user fields.
  if (!empty($keycloakUser) && is_array($keycloakUser)) {
    if (!empty($keycloakUser['firstName'])) {
      $user->set('first_name', $keycloakUser['firstName']);
    }
    if (!empty($keycloakUser['lastName'])) {
      $user->set('last_name', $keycloakUser['lastName']);
    }
    if (!empty($keycloakUser['id'])) {
      $user->set('sso_user_id', $keycloakUser['id']);
    }
    // Save the user entity after updating fields.
    $user->save();
  }
}

/**
 * Syncs the relationship from component to projects.
 *
 * @param \Drupal\soda_scs_manager\Entity\SodaScsComponent $component
 *   The component entity.
 */
function _soda_scs_manager_sync_component_project_relationship(SodaScsComponent $component) {
  // Skip if we're in the middle of syncing to prevent infinite recursion.
  if (!empty($component->syncing)) {
    return;
  }

  // Get projects referenced by this component.
  $projectIds = [];
  $partOfProjects = $component->get('partOfProjects')->getValue();
  foreach ($partOfProjects as $projectRef) {
    $projectIds[] = $projectRef['target_id'];
  }

  if (empty($projectIds)) {
    return;
  }

  // Load all referenced projects.
  $projectStorage = \Drupal::entityTypeManager()->getStorage('soda_scs_project');
  /** @var \Drupal\soda_scs_manager\Entity\SodaScsProject[] $projects */
  $projects = $projectStorage->loadMultiple($projectIds);

  // For each project, ensure it references this component.
  foreach ($projects as $project) {
    /** @var \Drupal\soda_scs_manager\Entity\SodaScsProject $project */
    $componentRefs = $project->get('connectedComponents')->getValue();
    $componentRefIds = [];
    foreach ($componentRefs as $ref) {
      $componentRefIds[] = $ref['target_id'];
    }

    // If this component is not referenced by the project, add it.
    if (!in_array($component->id(), $componentRefIds)) {
      $componentRefs[] = ['target_id' => $component->id()];
      $project->set('connectedComponents', $componentRefs);
      // Prevent infinite recursion by setting a flag.
      $project->syncing = TRUE;
      $project->save();
    }
  }
}

/**
 * Syncs the relationship from project to components.
 *
 * @param \Drupal\soda_scs_manager\Entity\SodaScsProject $project
 *   The project entity.
 */
function _soda_scs_manager_sync_project_component_relationship(SodaScsProject $project) {
  // Get components referenced by this project.
  $componentIds = [];
  $connectedComponents = $project->get('connectedComponents')->getValue();
  foreach ($connectedComponents as $componentRef) {
    $componentIds[] = $componentRef['target_id'];
  }

  // Load all components that might reference this project.
  $componentStorage = \Drupal::entityTypeManager()->getStorage('soda_scs_component');

  // First, find all components that reference this project.
  $query = $componentStorage->getQuery()
    ->condition('partOfProjects', $project->id())
    ->accessCheck(FALSE);
  $referencingComponentIds = $query->execute();

  if (!empty($referencingComponentIds)) {
    $referencingComponents = $componentStorage->loadMultiple($referencingComponentIds);

    // For each component that references this project,
    // check if it should still reference it.
    /** @var \Drupal\soda_scs_manager\Entity\SodaScsComponent $component */
    foreach ($referencingComponents as $component) {
      // Skip if the component is still connected to the project.
      if (in_array($component->id(), $componentIds)) {
        continue;
      }

      // Component is no longer connected to the project, remove the reference.
      $projectRefs = [];
      foreach ($component->get('partOfProjects')->getValue() as $ref) {
        if ($ref['target_id'] != $project->id()) {
          $projectRefs[] = $ref;
        }
      }

      // Update the component with the new references.
      $component->set('partOfProjects', $projectRefs);
      // Prevent infinite recursion by setting a flag.
      $component->syncing = TRUE;
      $component->save();
    }
  }

  // If there are no components connected to this project, we're done.
  if (empty($componentIds)) {
    return;
  }

  // Load all currently referenced components.
  /** @var \Drupal\soda_scs_manager\Entity\SodaScsComponent[] $components */
  $components = $componentStorage->loadMultiple($componentIds);

  // For each component, ensure it references this project.
  foreach ($components as $component) {
    $projectRefs = $component->get('partOfProjects')->getValue();
    $projectRefIds = [];
    foreach ($projectRefs as $ref) {
      $projectRefIds[] = $ref['target_id'];
    }

    // If this project is not referenced by the component, add it.
    if (!in_array($project->id(), $projectRefIds)) {
      $projectRefs[] = ['target_id' => $project->id()];
      $component->set('partOfProjects', $projectRefs);
      // Prevent infinite recursion by setting a flag.
      $component->syncing = TRUE;
      $component->save();
    }
  }
}
