<?php

/**
 * @file
 * Installation functions for SODa SCS Manager.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Database\Database;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\File\FileExists;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\soda_scs_manager\ComputedField\SodaScsGroupIdComputedItemList;

/**
 * Implements hook_install().
 */
function soda_scs_manager_install() {
  $source_directory = \Drupal::service('extension.list.module')
    ->getPath('soda_scs_manager') . '/assets/images';
  $destination_directory = 'public://soda_scs_manager/images';

  $file_system = \Drupal::service('file_system');

  // Ensure the destination directory exists.
  $file_system->prepareDirectory($destination_directory, FileSystemInterface::CREATE_DIRECTORY);

  // Get all image files from the source directory.
  $files = $file_system->scanDirectory($source_directory, '/.*\.(jpg|png|gif|svg)$/');

  // Copy each file to the destination directory.
  foreach ($files as $file) {
    $destination = $destination_directory . '/' . $file->filename;
    $file_system->copy($file->uri, $destination, FileExists::Replace);
  }

  // Set the default front page to the soda_scs_manager start page.
  \Drupal::configFactory()->getEditable('system.site')
    ->set('page.front', '/soda-scs-manager')
    ->save();

  // Remove specified blocks from layout.
  _soda_scs_manager_remove_default_blocks();

  // Move account menu to footer_top region.
  $block_ids = \Drupal::entityQuery('block')
    ->condition('plugin', 'system_menu_block:account')
    ->execute();

  if (!empty($block_ids)) {
    $blocks = Block::loadMultiple($block_ids);
    foreach ($blocks as $block) {
      $block->setRegion('footer_top');
      $block->save();
    }
  }

  // Check if Olivero is the default theme and set custom color scheme.
  $default_theme = \Drupal::config('system.theme')->get('default');
  if ($default_theme === 'olivero') {
    // Set Olivero theme to use custom color scheme with primary color #ff8904.
    \Drupal::configFactory()->getEditable('olivero.settings')
      ->set('color_scheme', 'custom')
      ->set('base_primary_color', '#ff8904')
      ->save();

    // Clear caches to apply the theme changes.
    \Drupal::service('cache.render')->deleteAll();
  }

  // Create the documentation page.
  _soda_scs_manager_create_documentation_page();
}

/**
 * Helper function to create the documentation page.
 */
function _soda_scs_manager_create_documentation_page() {
  // Check if the documentation page already exists.
  $existing_nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties([
      'type' => 'documentation',
      'title' => 'Documentation',
    ]);

  if (!empty($existing_nodes)) {
    return;
  }

  // Create the documentation page.
  $node = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->create([
      'type' => 'documentation',
      'title' => 'Documentation',
      'body' => [
        'value' => '<h2>The Basics</h2>
<p>The SODa <strong>Semantic Co-Working Space (SCS)</strong> is an infrastructure that offers users a wide range of opportunities to network, research and learn. It is developed as part of the <a href="https://sammlungen.io/about">SODa project</a> and the technical basis for our services, best practices and content.</p>

<p>Users can import data, documents, algorithms, models, etc. into the SCS or create, edit and make them accessible directly there, as well as export them again. There is no limit to the amount of data.</p>

<p>Users have various applications at their disposal that enable them to model, develop, transform, migrate, analyse, visualise, save, publish, enrich or process data with programming code.</p>

<p>The SCS offers a <a href="#Applications">various applications</a> to accomplish these tasks. Most of them can be used as standalone <a href="#SingleApplications">Applications</a>, but some of them come in <a href="#BundledApplications">Bundles</a> as they rely on other components or work the best if you pair them up.</p>

<h2 id="Applications">Available Applications</h2>
<h3 id="BundledApplications">Bundled Applications:</h3>

<ul>
  <li>JupyterHub + OpenRefine</li>
  <li>WissKI + Triplestore + SQL Database</li>
  <li>Nextcloud + Draw.io + OnlyOffice</li>
</ul>

<h3 id="SingleApplications">Single Applications:</h3>

<ul>
  <li>Filesystem</li>
  <li>SQL Database</li>
  <li>Triplestore</li>
  <li>WebProtégé</li>
  <li>WissKI</li>
</ul>',
        'format' => 'full_html',
      ],
      'status' => 1,
      'uid' => 1,
      'path' => [
        'alias' => '/soda-scs-manager/docs',
        'langcode' => 'en',
      ],
    ]);

  $node->save();
}

/**
 * Helper function to remove default blocks.
 */
function _soda_scs_manager_remove_default_blocks() {
  $blocks_to_remove = [
    'system_powered_by_block',
    'node_syndicate_block',
    'search_form_block',
  ];

  foreach ($blocks_to_remove as $block_id) {
    $blocks = \Drupal::entityTypeManager()
      ->getStorage('block')
      ->loadByProperties(['plugin' => $block_id]);

    foreach ($blocks as $block) {
      $block->delete();
    }
  }
}

/**
 * Implements hook_schema().
 */
function soda_scs_manager_schema() {
  $schema['keycloak_user_registration'] = [
    'description' => 'Stores user registrations pending admin approval before adding to Keycloak.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique registration ID.',
      ],
      'email' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'User email address.',
      ],
      'username' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Username for the account.',
      ],
      'first_name' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'First name of the user.',
      ],
      'last_name' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Last name of the user.',
      ],
      'password' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Temporary password hash for the user.',
      ],
      'status' => [
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'default' => 'pending',
        'description' => 'Status of the registration (pending, approved, rejected).',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Unix timestamp when the registration was created.',
      ],
      'updated' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Unix timestamp when the registration was last updated.',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'email' => ['email'],
      'username' => ['username'],
      'status' => ['status'],
    ],
  ];

  return $schema;
}

/**
 * Set the default front page to the SCS Manager start page.
 */
function soda_scs_manager_update_11001() {
  \Drupal::configFactory()->getEditable('system.site')
    ->set('page.front', '/soda-scs-manager')
    ->save();

  return t('Default front page has been set to the SODa SCS Manager start page.');
}

/**
 * Remove default blocks from layout.
 */
function soda_scs_manager_update_11002() {
  _soda_scs_manager_remove_default_blocks();

  return t('Default blocks have been removed from the layout.');
}

/**
 * Move account menu to footer_top region.
 */
function soda_scs_manager_update_11003() {
  $block_ids = \Drupal::entityQuery('block')
    ->condition('plugin', 'system_menu_block:account')
    ->execute();

  if (!empty($block_ids)) {
    $blocks = Block::loadMultiple($block_ids);
    foreach ($blocks as $block) {
      $block->setRegion('footer_top');
      $block->save();
    }
  }

  return t('Account menu block has been moved to the footer_top region.');
}

/**
 * Add keycloak_user_registration table.
 */
function soda_scs_manager_update_11004() {
  $schema = Database::getConnection()->schema();

  if (!$schema->tableExists('keycloak_user_registration')) {
    $table = soda_scs_manager_schema();
    $schema->createTable('keycloak_user_registration', $table['keycloak_user_registration']);
    return t('Created keycloak_user_registration table.');
  }

  return t('Table keycloak_user_registration already exists.');
}

/**
 * Set the default front page to the SCS Manager start page.
 */
function soda_scs_manager_update_11005() {
  // If theme is olivero, set custom color scheme.
  $default_theme = \Drupal::config('system.theme')->get('default');
  if ($default_theme === 'olivero') {
    \Drupal::configFactory()->getEditable('olivero.settings')
      ->set('color_scheme', 'custom')
      ->set('base_primary_color', '#ff8904')
      ->save();
  }

  return t('Olivero theme has been configured with custom color scheme.');
}

/**
 * Create documentation basic page with URL alias.
 */
function soda_scs_manager_update_11006() {
  // Install the documentation content type configuration.
  $config_installer = \Drupal::service('config.installer');
  $config_installer->installDefaultConfig('module', 'soda_scs_manager');

  // Create the documentation page.
  _soda_scs_manager_create_documentation_page();

  return t('Documentation content type and page have been created with URL alias /soda-scs-manager/docs.');
}

/**
 * Add new fields to user.
 *
 * Fields are: default_project, first_name, last_name, sso_user_id fields.
 */
function soda_scs_manager_update_11007() {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $fields = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions('user');

  if (!isset($fields['default_project'])) {
    $fields['default_project'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(new TranslatableMarkup('Default Project'))
      ->setDescription(new TranslatableMarkup('The default project for this user.'))
      ->setSetting('target_type', 'soda_scs_project')
      ->setSetting('target_bundles', ['default'])
      ->setRequired(TRUE)
      ->setCardinality(1)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'entity_reference_autocomplete',
        'weight' => 10,
        'label' => 'above',
        'settings' => [
          'match_operator' => 'CONTAINS',
          'size' => 60,
          'placeholder' => '',
        ],
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'type' => 'entity_reference_label',
        'weight' => 10,
        'label' => 'above',
        'settings' => [
          'link' => TRUE,
        ],
      ]);
    $definition_update_manager->installFieldStorageDefinition('default_project', 'user', 'core', $fields['default_project']);
  }
  if (!isset($fields['first_name'])) {
    $fields['first_name'] = BaseFieldDefinition::create('string')
      ->setLabel(new TranslatableMarkup('First Name'))
      ->setDescription(new TranslatableMarkup('The first name of the user.'))
      ->setRequired(TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => 10,
        'label' => 'above',
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'type' => 'string',
        'weight' => 10,
        'label' => 'above',
      ]);
    $definition_update_manager->installFieldStorageDefinition('first_name', 'user', 'core', $fields['first_name']);
  }
  if (!isset($fields['last_name'])) {
    $fields['last_name'] = BaseFieldDefinition::create('string')
      ->setLabel(new TranslatableMarkup('Last Name'))
      ->setDescription(new TranslatableMarkup('The last name of the user.'))
      ->setRequired(TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => 10,
        'label' => 'above',
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'type' => 'string',
        'weight' => 10,
        'label' => 'above',
      ]);
    $definition_update_manager->installFieldStorageDefinition('last_name', 'user', 'core', $fields['last_name']);
  }
  if (!isset($fields['sso_user_id'])) {
    $fields['sso_user_id'] = BaseFieldDefinition::create('string')
      ->setLabel(new TranslatableMarkup('SSO User ID'))
      ->setDescription(new TranslatableMarkup('The SSO user ID of the user.'))
      ->setRequired(TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => 10,
        'label' => 'above',
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', [
        'type' => 'string',
        'weight' => 10,
        'label' => 'above',
      ]);
    $definition_update_manager->installFieldStorageDefinition('sso_user_id', 'user', 'core', $fields['sso_user_id']);
  }
  // Clear caches to refresh field definitions.
  drupal_flush_all_caches();

  return t('Ensured user base fields exist: default_project, first_name, last_name, sso_user_id.');

}

/**
 * Add keycloakUuid field and groupId field to project entity.
 */
function soda_scs_manager_update_11008() {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $fields = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions('soda_scs_project');

  if (!isset($fields['keycloakUuid'])) {
    $fields['keycloakUuid'] = BaseFieldDefinition::create('string')
      ->setLabel(new TranslatableMarkup('Keycloak UUID'))
      ->setDescription(new TranslatableMarkup('The Keycloak UUID of the project group.'))
      ->setReadOnly(TRUE)
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE)
      ->setDisplayOptions('view', [
        'label' => 'above',
        'type' => 'string',
        'weight' => 10,
      ]);
    $definition_update_manager->installFieldStorageDefinition('keycloakUuid', 'soda_scs_project', 'core', $fields['keycloakUuid']);
  }
  if (!isset($fields['groupId'])) {
    $fields['groupId'] = BaseFieldDefinition::create('integer')
      ->setLabel(new TranslatableMarkup('Permission Group ID'))
      ->setDescription(new TranslatableMarkup('The permission group ID associated with the project.'))
      ->setComputed(TRUE)
      ->setClass(SodaScsGroupIdComputedItemList::class)
      ->setReadOnly(TRUE)
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE)
      ->setDisplayOptions('view', [
        'label' => 'above',
        'type' => 'integer',
        'weight' => 10,
      ]);
    $definition_update_manager->installFieldStorageDefinition('groupId', 'soda_scs_project', 'core', $fields['groupId']);
  }
  // Clear caches to refresh field definitions.
  drupal_flush_all_caches();

  return t('Ensured project base fields exist: keycloakUuid, groupId.');
}
